{"ast":null,"code":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../Service/my-ser.service\";\nimport * as i2 from \"@angular/router\";\n//רשימה זמנית\nconst TREE_DATA = [{\n  name: 'Fruit',\n  children: [{\n    name: 'Apple'\n  }, {\n    name: 'Banana'\n  }, {\n    name: 'Fruit loops'\n  }]\n}, {\n  name: 'Vegetables',\n  children: [{\n    name: 'Green',\n    children: [{\n      name: 'Broccoli'\n    }, {\n      name: 'Brussels sprouts'\n    }]\n  }, {\n    name: 'Orange',\n    children: [{\n      name: 'Pumpkins'\n    }, {\n      name: 'Carrots'\n    }]\n  }]\n}];\nclass ListBarComponent {\n  // treeFlattener = new MatTreeFlattener(\n  //   this._transformer,\n  //   node => node.level,\n  //   node => node.expandable,\n  //   node => node.children,\n  // );\n  // dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  constructor(myServe, route) {\n    this.myServe = myServe;\n    this.route = route;\n    this.allListFile = [];\n    this._transformer = (node, level) => {\n      return {\n        expandable: !!node.children && node.children.length > 0,\n        name: node.name,\n        level: level\n      };\n    };\n    this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n    this.hasChild = (_, node) => node.expandable;\n    // this.dataSource.data = TREE_DATA;\n  }\n\n  ngOnInit() {\n    this.allListFile = [];\n    this.myServe.getFileListToClient().subscribe(data => {\n      this.allListFile = data;\n      alert(\"get files sucssesfuly\");\n    }, err => {\n      alert(err.message);\n    });\n  }\n  static #_ = this.ɵfac = function ListBarComponent_Factory(t) {\n    return new (t || ListBarComponent)(i0.ɵɵdirectiveInject(i1.MySerService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListBarComponent,\n    selectors: [[\"app-list-bar\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 0,\n    template: function ListBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0, \"\\u05EA\\\\\\n\");\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { ListBarComponent };","map":{"version":3,"names":["FlatTreeControl","TREE_DATA","name","children","ListBarComponent","constructor","myServe","route","allListFile","_transformer","node","level","expandable","length","treeControl","hasChild","_","ngOnInit","getFileListToClient","subscribe","data","alert","err","message","i0","ɵɵdirectiveInject","i1","MySerService","i2","ActivatedRoute","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","template","ListBarComponent_Template","rf","ctx","ɵɵtext"],"sources":["C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\Components\\list-bar\\list-bar.component.ts","C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\Components\\list-bar\\list-bar.component.html"],"sourcesContent":["import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\n// import {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\n// import {MatIconModule} from '@angular/material/icon';\n// import {MatButtonModule} from '@angular/material/button';\n import { ActivatedRoute } from '@angular/router';\n import { MySerService } from '../../Service/my-ser.service';\n\n//הגדרת הרשימה\ninterface allListFile {\n  name: string;\n  children?: allListFile[];\n}\n//רשימה זמנית\nconst TREE_DATA: allListFile[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n//\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n@Component({\n  selector: 'app-list-bar',\n  templateUrl: './list-bar.component.html',\n  styleUrls: ['./list-bar.component.css'],\n  standalone: true,\n  // imports: [MatTreeModule, MatButtonModule, MatIconModule],\n})\n\n\nexport class ListBarComponent {\n\n public allListFile:string[] = [];\n  \n private _transformer = (node: allListFile, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  // treeFlattener = new MatTreeFlattener(\n  //   this._transformer,\n  //   node => node.level,\n  //   node => node.expandable,\n  //   node => node.children,\n  // );\n\n  // dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor(private myServe:MySerService,private route:ActivatedRoute) {\n    // this.dataSource.data = TREE_DATA;\n  }\n\n  ngOnInit() {\n    this.allListFile = [];\n    this.myServe.getFileListToClient().subscribe(\n      data => {\n       this.allListFile = data;\n       alert(\"get files sucssesfuly\");\n      },\n      err => {\n        alert(err.message);\n      }\n      );\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n","ת\\\n<!-- <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\"> -->\n    <!-- This is the tree node template for leaf nodes -->\n    <!-- <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding> -->\n      <!-- use a disabled button to provide padding for tree leaf -->\n      <!-- <mat-icon matListItemIcon>note</mat-icon>\n      <button mat-icon-button disabled></button>\n      {{node.name}}\n    </mat-tree-node> -->\n\n    <!-- This is the tree node template for expandable nodes -->\n    <!-- <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n     <mat-icon matListItemIcon>folder</mat-icon>\n     {{node.name}}\n      <button mat-icon-button matTreeNodeToggle\n              [attr.aria-label]=\"'Toggle ' + node.name\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n        </mat-icon>\n      </button>\n    </mat-tree-node>\n  </mat-tree> -->\n  \n\n"],"mappings":"AAAA,SAAQA,eAAe,QAAO,mBAAmB;;;;AAajD;AACA,MAAMC,SAAS,GAAkB,CAC/B;EACEC,IAAI,EAAE,OAAO;EACbC,QAAQ,EAAE,CAAC;IAACD,IAAI,EAAE;EAAO,CAAC,EAAE;IAACA,IAAI,EAAE;EAAQ,CAAC,EAAE;IAACA,IAAI,EAAE;EAAa,CAAC;CACpE,EACD;EACEA,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE,CACR;IACED,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC;MAACD,IAAI,EAAE;IAAU,CAAC,EAAE;MAACA,IAAI,EAAE;IAAkB,CAAC;GAC1D,EACD;IACEA,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE,CAAC;MAACD,IAAI,EAAE;IAAU,CAAC,EAAE;MAACA,IAAI,EAAE;IAAS,CAAC;GACjD;CAEJ,CACF;AAQD,MASaE,gBAAgB;EAiB3B;EACA;EACA;EACA;EACA;EACA;EAEA;EAEAC,YAAoBC,OAAoB,EAASC,KAAoB;IAAjD,KAAAD,OAAO,GAAPA,OAAO;IAAsB,KAAAC,KAAK,GAALA,KAAK;IAxBhD,KAAAC,WAAW,GAAY,EAAE;IAExB,KAAAC,YAAY,GAAG,CAACC,IAAiB,EAAEC,KAAa,KAAI;MACzD,OAAO;QACLC,UAAU,EAAE,CAAC,CAACF,IAAI,CAACP,QAAQ,IAAIO,IAAI,CAACP,QAAQ,CAACU,MAAM,GAAG,CAAC;QACvDX,IAAI,EAAEQ,IAAI,CAACR,IAAI;QACfS,KAAK,EAAEA;OACR;IACH,CAAC;IAED,KAAAG,WAAW,GAAG,IAAId,eAAe,CAC/BU,IAAI,IAAIA,IAAI,CAACC,KAAK,EAClBD,IAAI,IAAIA,IAAI,CAACE,UAAU,CACxB;IA4BD,KAAAG,QAAQ,GAAG,CAACC,CAAS,EAAEN,IAAqB,KAAKA,IAAI,CAACE,UAAU;IAhB9D;EACF;;EAEAK,QAAQA,CAAA;IACN,IAAI,CAACT,WAAW,GAAG,EAAE;IACrB,IAAI,CAACF,OAAO,CAACY,mBAAmB,EAAE,CAACC,SAAS,CAC1CC,IAAI,IAAG;MACN,IAAI,CAACZ,WAAW,GAAGY,IAAI;MACvBC,KAAK,CAAC,uBAAuB,CAAC;IAC/B,CAAC,EACDC,GAAG,IAAG;MACJD,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IACpB,CAAC,CACA;EACL;EAAC,QAAAP,CAAA,G;qBAzCUZ,gBAAgB,EAAAoB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAhB1B,gBAAgB;IAAA2B,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAT,EAAA,CAAAU,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCjD7Bf,EAAA,CAAAiB,MAAA,iBACA;;;;;;SDgDarC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}