{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n  constructor(elementRef, tree, tabIndex) {\n    super(elementRef, tree);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static #_ = this.ɵfac = function MatTreeNode_Factory(t) {\n    return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNode,\n    selectors: [[\"mat-tree-node\"]],\n    hostAttrs: [1, \"mat-tree-node\"],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matTreeNode\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: MatTreeNode\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }],\n      host: {\n        'class': 'mat-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTreeNodeDef_BaseFactory;\n    return function MatTreeNodeDef_Factory(t) {\n      return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeDef,\n    selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"matTreeNodeDefWhen\", \"when\"],\n      data: [\"matTreeNode\", \"data\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeDef,\n      useExisting: MatTreeNodeDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  /** Whether the node is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Tabindex for the node. */\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  constructor(elementRef, tree, differs, tabIndex) {\n    super(elementRef, tree, differs);\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static #_ = this.ɵfac = function MatNestedTreeNode_Factory(t) {\n    return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatNestedTreeNode,\n    selectors: [[\"mat-nested-tree-node\"]],\n    hostAttrs: [1, \"mat-nested-tree-node\"],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\",\n      node: [\"matNestedTreeNode\", \"node\"]\n    },\n    exportAs: [\"matNestedTreeNode\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkNestedTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CdkTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: MatNestedTreeNode\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }],\n      host: {\n        'class': 'mat-nested-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTreeNodePadding_BaseFactory;\n    return function MatTreeNodePadding_Factory(t) {\n      return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodePadding,\n    selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"matTreeNodePadding\", \"level\"],\n      indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodePadding,\n      useExisting: MatTreeNodePadding\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n  static #_ = this.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n    return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeOutlet,\n    selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeOutlet,\n      useExisting: MatTreeNodeOutlet\n    }])]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n  constructor() {\n    super(...arguments);\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n    this._nodeOutlet = undefined;\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTree_BaseFactory;\n    return function MatTree_Factory(t) {\n      return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatTree,\n    selectors: [[\"mat-tree\"]],\n    viewQuery: function MatTree_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n    exportAs: [\"matTree\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTree,\n      useExisting: MatTree\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"matTreeNodeOutlet\", \"\"]],\n    template: function MatTree_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [MatTreeNodeOutlet],\n    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTreeNodeToggle_BaseFactory;\n    return function MatTreeNodeToggle_Factory(t) {\n      return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeToggle,\n    selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n    inputs: {\n      recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeToggle,\n      useExisting: MatTreeNodeToggle\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }],\n      inputs: ['recursive: matTreeNodeToggleRecursive']\n    }]\n  }], null, null);\n})();\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {\n  static #_ = this.ɵfac = function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatTreeModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CdkTreeModule, MatCommonModule, MatCommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n  }\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","_MatTreeNodeBase","MatTreeNode","constructor","elementRef","tree","tabIndex","Number","ngOnInit","ngOnDestroy","_","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ElementRef","ɵɵinjectAttribute","_2","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","role","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","host","undefined","decorators","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","MatNestedTreeNode","_disabled","value","_tabIndex","differs","ngAfterContentInit","MatNestedTreeNode_Factory","IterableDiffers","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","ViewContainerRef","MatTree","arguments","_nodeOutlet","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","None","changeDetection","Default","static","MatTreeNodeToggle","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","recursive","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_data","next","_flattenedData","_treeFlattener","_treeControl","dataNodes","initialData","_expandedData","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource"],"sources":["C:/Users/IMOE001/Desktop/nechama/myProject/myProject/node_modules/@angular/material/fesm2022/tree.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTreeNode, selector: \"mat-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, host: { classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                    host: {\n                        'class': 'mat-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTreeNodeDef, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: ['when: matTreeNodeDefWhen'],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /** Whether the node is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n    get tabIndex() {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatNestedTreeNode, selector: \"mat-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n        ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'mat-nested-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTreeNodePadding, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: ['matTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\", providers: [\n            {\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet,\n            },\n        ], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n    constructor() {\n        super(...arguments);\n        // Outlets within the tree's template where the dataNodes will be inserted.\n        // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n        this._nodeOutlet = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTree, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"], dependencies: [{ kind: \"directive\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        'class': 'mat-tree',\n                        'role': 'tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTreeNodeToggle, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                    inputs: ['recursive: matTreeNodeToggleRecursive'],\n                }]\n        }] });\n\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeModule, declarations: [MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet], imports: [CdkTreeModule, MatCommonModule], exports: [MatCommonModule, MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                    declarations: MAT_TREE_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}