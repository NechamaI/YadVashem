{"ast":null,"code":"import * as i0 from \"@angular/core\";\nfunction ListBarComponent_mat_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3)(1, \"mat-icon\", 4);\n    i0.ɵɵtext(2, \"note\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"button\", 5);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", node_r2.name, \" \");\n  }\n}\nfunction ListBarComponent_mat_tree_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3)(1, \"mat-icon\", 4);\n    i0.ɵɵtext(2, \"folder\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"button\", 6)(5, \"mat-icon\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", node_r3.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.isExpanded(node_r3) ? \"expand_more\" : \"chevron_right\", \" \");\n  }\n}\n//רשימה זמנית\nconst TREE_DATA = [{\n  name: 'Fruit',\n  children: [{\n    name: 'Apple'\n  }, {\n    name: 'Banana'\n  }, {\n    name: 'Fruit loops'\n  }]\n}, {\n  name: 'Vegetables',\n  children: [{\n    name: 'Green',\n    children: [{\n      name: 'Broccoli'\n    }, {\n      name: 'Brussels sprouts'\n    }]\n  }, {\n    name: 'Orange',\n    children: [{\n      name: 'Pumpkins'\n    }, {\n      name: 'Carrots'\n    }]\n  }]\n}];\nclass ListBarComponent {\n  static #_ = this.ɵfac = function ListBarComponent_Factory(t) {\n    return new (t || ListBarComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListBarComponent,\n    selectors: [[\"app-list-bar\"]],\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"matListItemIcon\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"]],\n    template: function ListBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree\", 0);\n        i0.ɵɵtemplate(1, ListBarComponent_mat_tree_node_1_Template, 5, 1, \"mat-tree-node\", 1);\n        i0.ɵɵtemplate(2, ListBarComponent_mat_tree_node_2_Template, 7, 3, \"mat-tree-node\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { ListBarComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","node_r2","name","node_r3","ɵɵattribute","ctx_r1","treeControl","isExpanded","TREE_DATA","children","ListBarComponent","_","_2","selectors","decls","vars","consts","template","ListBarComponent_Template","rf","ctx","ɵɵtemplate","ListBarComponent_mat_tree_node_1_Template","ListBarComponent_mat_tree_node_2_Template","ɵɵproperty","dataSource","hasChild"],"sources":["C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\list-bar\\list-bar.component.ts","C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\list-bar\\list-bar.component.html"],"sourcesContent":["import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n//הגדרת הרשימה\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n//רשימה זמנית\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n//\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n@Component({\n  selector: 'app-list-bar',\n  templateUrl: './list-bar.component.html',\n  styleUrls: ['./list-bar.component.css'],\n  \n})\nexport class ListBarComponent {\n\n}\n","\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n      <!-- use a disabled button to provide padding for tree leaf -->\n      <mat-icon matListItemIcon>note</mat-icon>\n      <button mat-icon-button disabled></button>\n      {{node.name}}\n    </mat-tree-node>\n\n    <!-- This is the tree node template for expandable nodes -->\n    <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n     <mat-icon matListItemIcon>folder</mat-icon>\n     {{node.name}}\n      <button mat-icon-button matTreeNodeToggle\n              [attr.aria-label]=\"'Toggle ' + node.name\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n        </mat-icon>\n      </button>\n    </mat-tree-node>\n  </mat-tree>\n  \n\n"],"mappings":";;;ICGIA,EAAA,CAAAC,cAAA,uBAA6D;IAEjCD,EAAA,CAAAE,MAAA,WAAI;IAAAF,EAAA,CAAAG,YAAA,EAAW;IACzCH,EAAA,CAAAI,SAAA,gBAA0C;IAC1CJ,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAgB;;;;IADdH,EAAA,CAAAK,SAAA,GACF;IADEL,EAAA,CAAAM,kBAAA,MAAAC,OAAA,CAAAC,IAAA,MACF;;;;;IAGAR,EAAA,CAAAC,cAAA,uBAA4E;IACjDD,EAAA,CAAAE,MAAA,aAAM;IAAAF,EAAA,CAAAG,YAAA,EAAW;IAC3CH,EAAA,CAAAE,MAAA,GACC;IAAAF,EAAA,CAAAC,cAAA,gBACkD;IAE9CD,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAW;;;;;IALdH,EAAA,CAAAK,SAAA,GACC;IADDL,EAAA,CAAAM,kBAAA,MAAAG,OAAA,CAAAD,IAAA,MACC;IACQR,EAAA,CAAAK,SAAA,GAAyC;IAAzCL,EAAA,CAAAU,WAAA,2BAAAD,OAAA,CAAAD,IAAA,CAAyC;IAE7CR,EAAA,CAAAK,SAAA,GACF;IADEL,EAAA,CAAAM,kBAAA,MAAAK,MAAA,CAAAC,WAAA,CAAAC,UAAA,CAAAJ,OAAA,yCACF;;;ADPR;AACA,MAAMK,SAAS,GAAe,CAC5B;EACEN,IAAI,EAAE,OAAO;EACbO,QAAQ,EAAE,CAAC;IAACP,IAAI,EAAE;EAAO,CAAC,EAAE;IAACA,IAAI,EAAE;EAAQ,CAAC,EAAE;IAACA,IAAI,EAAE;EAAa,CAAC;CACpE,EACD;EACEA,IAAI,EAAE,YAAY;EAClBO,QAAQ,EAAE,CACR;IACEP,IAAI,EAAE,OAAO;IACbO,QAAQ,EAAE,CAAC;MAACP,IAAI,EAAE;IAAU,CAAC,EAAE;MAACA,IAAI,EAAE;IAAkB,CAAC;GAC1D,EACD;IACEA,IAAI,EAAE,QAAQ;IACdO,QAAQ,EAAE,CAAC;MAACP,IAAI,EAAE;IAAU,CAAC,EAAE;MAACA,IAAI,EAAE;IAAS,CAAC;GACjD;CAEJ,CACF;AAQD,MAMaQ,gBAAgB;EAAA,QAAAC,CAAA,G;qBAAhBD,gBAAgB;EAAA;EAAA,QAAAE,EAAA,G;UAAhBF,gBAAgB;IAAAG,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QC3C7BzB,EAAA,CAAAC,cAAA,kBAAgE;QAE5DD,EAAA,CAAA2B,UAAA,IAAAC,yCAAA,2BAKgB;QAGhB5B,EAAA,CAAA2B,UAAA,IAAAE,yCAAA,2BASgB;QAClB7B,EAAA,CAAAG,YAAA,EAAW;;;QApBHH,EAAA,CAAA8B,UAAA,eAAAJ,GAAA,CAAAK,UAAA,CAAyB,gBAAAL,GAAA,CAAAd,WAAA;QAUUZ,EAAA,CAAAK,SAAA,GAAc;QAAdL,EAAA,CAAA8B,UAAA,uBAAAJ,GAAA,CAAAM,QAAA,CAAc;;;;;;SDiC9ChB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}