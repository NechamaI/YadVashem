{"ast":null,"code":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from '@angular/material/tree';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/tree\";\nimport * as i2 from \"@angular/material/button\";\nfunction ListBarComponent_mat_tree_node_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n    i0.ɵɵelement(1, \"button\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", node_r2.name, \" \");\n  }\n}\nfunction ListBarComponent_mat_tree_node_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n    i0.ɵɵelement(1, \"button\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r3.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r3.name, \" \");\n  }\n}\n//רשימה זמנית\nconst TREE_DATA = [{\n  name: 'Fruit',\n  children: [{\n    name: 'Apple'\n  }, {\n    name: 'Banana'\n  }, {\n    name: 'Fruit loops'\n  }]\n}, {\n  name: 'Vegetables',\n  children: [{\n    name: 'Green',\n    children: [{\n      name: 'Broccoli'\n    }, {\n      name: 'Brussels sprouts'\n    }]\n  }, {\n    name: 'Orange',\n    children: [{\n      name: 'Pumpkins'\n    }, {\n      name: 'Carrots'\n    }]\n  }]\n}];\nclass ListBarComponent {\n  constructor() {\n    this._transformer = (node, level) => {\n      return {\n        expandable: !!node.children && node.children.length > 0,\n        name: node.name,\n        level: level\n      };\n    };\n    this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n    this.treeFlattener = new MatTreeFlattener(this._transformer, node => node.level, node => node.expandable, node => node.children);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.hasChild = (_, node) => node.expandable;\n    this.dataSource.data = TREE_DATA;\n  }\n  static #_ = this.ɵfac = function ListBarComponent_Factory(t) {\n    return new (t || ListBarComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListBarComponent,\n    selectors: [[\"app-list-bar\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 5,\n    vars: 3,\n    consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"]],\n    template: function ListBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"list-bar works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"mat-tree\", 0);\n        i0.ɵɵtemplate(3, ListBarComponent_mat_tree_node_3_Template, 3, 1, \"mat-tree-node\", 1);\n        i0.ɵɵtemplate(4, ListBarComponent_mat_tree_node_4_Template, 3, 2, \"mat-tree-node\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n      }\n    },\n    dependencies: [MatTreeModule, i1.MatTreeNodeDef, i1.MatTreeNodePadding, i1.MatTreeNodeToggle, i1.MatTree, i1.MatTreeNode, MatButtonModule, i2.MatIconButton, MatIconModule],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { ListBarComponent };","map":{"version":3,"names":["FlatTreeControl","MatTreeFlatDataSource","MatTreeFlattener","MatTreeModule","MatIconModule","MatButtonModule","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","node_r2","name","ɵɵattribute","node_r3","TREE_DATA","children","ListBarComponent","constructor","_transformer","node","level","expandable","length","treeControl","treeFlattener","dataSource","hasChild","_","data","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ListBarComponent_Template","rf","ctx","ɵɵtemplate","ListBarComponent_mat_tree_node_3_Template","ListBarComponent_mat_tree_node_4_Template","ɵɵproperty","i1","MatTreeNodeDef","MatTreeNodePadding","MatTreeNodeToggle","MatTree","MatTreeNode","i2","MatIconButton","styles"],"sources":["C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\list-bar\\list-bar.component.ts","C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\list-bar\\list-bar.component.html"],"sourcesContent":["import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n//הגדרת הרשימה\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n//רשימה זמנית\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n//\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n@Component({\n  selector: 'app-list-bar',\n  templateUrl: './list-bar.component.html',\n  styleUrls: ['./list-bar.component.css'],\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n})\nexport class ListBarComponent {\n  private _transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n","<p>list-bar works!</p>\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n      <!-- use a disabled button to provide padding for tree leaf -->\n      <button mat-icon-button disabled></button>\n      {{node.name}}\n    </mat-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n      <button mat-icon-button matTreeNodeToggle\n              [attr.aria-label]=\"'Toggle ' + node.name\">\n      \n      </button>\n      {{node.name}}\n    </mat-tree-node>\n  </mat-tree>\n  \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}