{"ast":null,"code":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from '@angular/material/tree';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Service/my-ser.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/tree\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nfunction ListBarComponent_mat_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3)(1, \"mat-icon\", 4);\n    i0.ɵɵtext(2, \"note\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"button\", 5);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", node_r2.name, \" \");\n  }\n}\nfunction ListBarComponent_mat_tree_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3)(1, \"mat-icon\", 4);\n    i0.ɵɵtext(2, \"folder\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"button\", 6)(5, \"mat-icon\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", node_r3.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.isExpanded(node_r3) ? \"expand_more\" : \"chevron_right\", \" \");\n  }\n}\n//רשימה זמנית\nconst TREE_DATA = [{\n  name: 'Fruit',\n  children: [{\n    name: 'Apple'\n  }, {\n    name: 'Banana'\n  }, {\n    name: 'Fruit loops'\n  }]\n}, {\n  name: 'Vegetables',\n  children: [{\n    name: 'Green',\n    children: [{\n      name: 'Broccoli'\n    }, {\n      name: 'Brussels sprouts'\n    }]\n  }, {\n    name: 'Orange',\n    children: [{\n      name: 'Pumpkins'\n    }, {\n      name: 'Carrots'\n    }]\n  }]\n}];\nclass ListBarComponent {\n  constructor(myServe, route) {\n    this.myServe = myServe;\n    this.route = route;\n    this.allListFile = [];\n    this._transformer = (node, level) => {\n      return {\n        expandable: !!node.children && node.children.length > 0,\n        name: node.name,\n        level: level\n      };\n    };\n    this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n    this.treeFlattener = new MatTreeFlattener(this._transformer, node => node.level, node => node.expandable, node => node.children);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.hasChild = (_, node) => node.expandable;\n    this.dataSource.data = TREE_DATA;\n  }\n  ngOnInit() {\n    this.allListFile = [];\n    this.myServe.sendListToClient(this.allListFile).subscribe(data => {\n      alert(\"get  sucssesfuly\");\n    }, err => {\n      alert(err.message);\n    });\n  }\n  static #_ = this.ɵfac = function ListBarComponent_Factory(t) {\n    return new (t || ListBarComponent)(i0.ɵɵdirectiveInject(i1.MySerService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListBarComponent,\n    selectors: [[\"app-list-bar\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"matListItemIcon\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"]],\n    template: function ListBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree\", 0);\n        i0.ɵɵtemplate(1, ListBarComponent_mat_tree_node_1_Template, 5, 1, \"mat-tree-node\", 1);\n        i0.ɵɵtemplate(2, ListBarComponent_mat_tree_node_2_Template, 7, 3, \"mat-tree-node\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n      }\n    },\n    dependencies: [MatTreeModule, i3.MatTreeNodeDef, i3.MatTreeNodePadding, i3.MatTreeNodeToggle, i3.MatTree, i3.MatTreeNode, MatButtonModule, i4.MatIconButton, MatIconModule, i5.MatIcon],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { ListBarComponent };","map":{"version":3,"names":["FlatTreeControl","MatTreeFlatDataSource","MatTreeFlattener","MatTreeModule","MatIconModule","MatButtonModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","node_r2","name","node_r3","ɵɵattribute","ctx_r1","treeControl","isExpanded","TREE_DATA","children","ListBarComponent","constructor","myServe","route","allListFile","_transformer","node","level","expandable","length","treeFlattener","dataSource","hasChild","_","data","ngOnInit","sendListToClient","subscribe","alert","err","message","ɵɵdirectiveInject","i1","MySerService","i2","ActivatedRoute","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ListBarComponent_Template","rf","ctx","ɵɵtemplate","ListBarComponent_mat_tree_node_1_Template","ListBarComponent_mat_tree_node_2_Template","ɵɵproperty","i3","MatTreeNodeDef","MatTreeNodePadding","MatTreeNodeToggle","MatTree","MatTreeNode","i4","MatIconButton","i5","MatIcon","styles"],"sources":["C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\Components\\list-bar\\list-bar.component.ts","C:\\Users\\IMOE001\\Desktop\\nechama\\myProject\\myProject\\src\\app\\Components\\list-bar\\list-bar.component.html"],"sourcesContent":["import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport { ActivatedRoute } from '@angular/router';\nimport { MySerService } from 'src/app/Service/my-ser.service';\n\n//הגדרת הרשימה\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n//רשימה זמנית\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n//\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n@Component({\n  selector: 'app-list-bar',\n  templateUrl: './list-bar.component.html',\n  styleUrls: ['./list-bar.component.css'],\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n})\n\n\nexport class ListBarComponent {\n\n public allListFile:string[] = [];\n  \n private _transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor(private myServe:MySerService,private route:ActivatedRoute) {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  ngOnInit() {\n    this.allListFile = [];\n    this.myServe.sendListToClient(this.allListFile).subscribe(\n      data => {\n       alert(\"get  sucssesfuly\");\n      },\n      err => {\n        alert(err.message);\n      }\n      );\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n","\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n      <!-- use a disabled button to provide padding for tree leaf -->\n      <mat-icon matListItemIcon>note</mat-icon>\n      <button mat-icon-button disabled></button>\n      {{node.name}}\n    </mat-tree-node>\n\n    <!-- This is the tree node template for expandable nodes -->\n    <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n     <mat-icon matListItemIcon>folder</mat-icon>\n     {{node.name}}\n      <button mat-icon-button matTreeNodeToggle\n              [attr.aria-label]=\"'Toggle ' + node.name\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n        </mat-icon>\n      </button>\n    </mat-tree-node>\n  </mat-tree>\n  \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}